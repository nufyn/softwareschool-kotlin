# 코틀린문법(2)

## 1. 함수
- C언어 함수
```c
int add(int a, int b);

int main() {
  return 0;
}

int add(int a, int b) {
  return a+b;
}
```
- Java 함수
```java
private void print() {
  System.println("java");
}

public void print() {
  System.println("java");
}
```

- 코틀린 함수 (중요)

- 코틀린의 모든함수는 fun으로 선언한다. private 형태로 선언을 할 경우에는 private fun 으로 선언한다. return값이 있을 경우 변수의 데이터 지정과 같이 데이터 형식을 지정한다.
```kotlin
fun print() {
  println("kotlin")
}

private fun(a: Int, b: Int) : Int {
  return a+b
}
```

<br>
<br>

## 2. 컬렉션
(1) 컬렉션(중요)
- 컬렉션(Collections) - 여러 데이터를 모아놓은 하나의 단위로 정의한다.

 종류
- listOf - 데이터가 일렬로 배열 되어있음. 안의 요소들은 초기화를 하면 변경이 불가능 하며 Array와 유사하다.
```kotlin
val list = listOf(1, 2, 3, 4)

값을 불러 올때에는 list[position] 혹은 list.get(position)을 사용한다.
```
- ArrayList - listOf와 유사하지만 포함된 데이터를 변경할 수 있다. (중요)
```kotlin
var list = ArrayList<Int>()
list.add(1)
list.add(2)

혹은

var list = arrayListOf(1, 2)
```
- mapOf - key와 value를 가지는 데이터 컬렉션 이다. 요소들은 초기화 하면 변경이 불가능하다.
```kotlin
val map : Map<String, Int> = mapOf("kotlin" to 1)

값을 불러 올때에는 map.get("kotlin")
```
- hashMapOf - mapOf와 유사하지만 포함된 데이터를 변경할 수 있다.
```kotlin
var hashMap : HashMap<String, Int> = hashMapOf("kotlin" to 1)

값을 불러 올때에는 hashMap.get("kotlin")
```

<br>
<br>


## 3. 클래스
- Java에서는 객체 생성시 생성자, get, set함수를 따로 만들어 줘야 하지만 코틀린에서는 아니다.
```java
public class Node {
  private int x;
  private int y;

  public Node(int x, int y) {
    this.x = x;
    this.y = y;
  }

  public setX(int x) {
    this.x = x;
  }

  public setY(int y) {
    this.y = y;
  }

  public getX() {
    return x;
  }
  
  public getY() {
    return y;
  }
}

Node의 x값을 사용하기 위해서는 
Node node = new Node();
node.setX();
```
- 코틀린에서는 생성자의 역할을 init에서 하고 get, set함수는 코틀린 자체적으로 만들기 떄문에 사용만 하면된다.
```kotlin
public class Node(x: Int, y: Int) {
  var x = 0
  var y = 0

  init {
    this.x = x
    this.y = y  
  }
}

Node의 x값을 사용하기 위해서는
val node = Node(1, 2)
node.x
```
- 보조 생성자의 경우에는 constructor라는 것을 쓰면된다.(부분 할당 하고싶을 때)
```kotlin
public class Node(x: Int, y: Int) {
  var x = 0
  var y = 0
  
  init {
    this.x = x
    this.y = y
  }

  constructor(x: Int) {
    this.x = x
  }
}
```
- Java의 public static과 같은 전역 변수는 코틀린에서 companion object라는 것을 사용한다.
```kotlin
public class Node(x: Int, y: Int) {
  companion object {
    var x = 0
    var y = 0
  }
}

companion object 사용시 클래스를 생성하지 않아도 값을 사용가능하다.
ex) Node.x
```
<br>
<br>


## 4. 데이터 클래스(중요)
- 데이터 클래스(data class) - 데이터만 담기 위해 존재하는 클래스이다. 함수 같은 것들이 존재하지 않는다.(데이터 틀을 만들기에 유용함)

```kotlin
data class User(
  var userId: String,
  var userPw: String,
  var userName: String
)
```
- 사용예제
```kotlin
var data = User("id", "pw", "name") 한개의 덩어리가 된다고 생각을 하면된다.
```

<br>
<br>

## 5. 람다(중요)
- 람다식(Lambda Expressions) - "식별자 없이 실행 가능한 함수"

  함수인데 함수를 따로 만들지 않고 코드 한줄에 써서 그 함수를 호출 하는 방식이다. 매우 편리하여 자주 쓰인다.
- 자바에서도 이용이 가능하지만 잘 사용되지 않고 코틀린에서는 빈도가 높게 사용된다.

버튼 클릭 이벤트의 경우 java
```kotlin
button.setOnClickListener(new View.OnClickListener() {
  @Override
  public void onClick(View view) {
    실행문;
  }
})
```
람다를 사용할 경우 아래와 같이 간결해진다.
```kotlin
button.setOnClickListener{
  실행문;
}
```
한개의 예시를 더들자면 아래와 같은 인터페이스가 있다.
```kotlin
public interface Calculate {
  fun plusAandB(a: Int, b: Int) : Int
}
```
원래의 사용법
```kotlin
var calc = Calculate() {
  override fun plusAandB(a:Int, b:Int) : Int {
    return a+b
  }
}
```
람다를 사용
```kotlin
var calc = (a, b) -> { return a+b }
```